{"ast":null,"code":"var _jsxFileName = \"C:\\\\nodejs_projects\\\\BeachExpress\\\\client\\\\src\\\\components\\\\SignIn.js\";\nimport React, { Component } from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport Form from \"react-bootstrap/Form\";\nimport axios from \"axios\";\nimport { SERVER_HOST } from \"../config/global_constants\";\nimport LinkInClass from \"../components/LinkInClass\";\nexport default class SignIn extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      this.state.submited = true;\n      this.validate();\n      console.log(this.state.isValidUsername);\n      console.log(this.state.isValidUsername);\n      console.log(this.state.isValidUsername);\n      console.log(this.state.isValidUsername);\n      console.log(this.state.isValidUsername);\n      console.log(this.isAllValid()); //console.log(\"Nombre: \" + this.state.isValidName);\n    };\n\n    this.state = {\n      username: \"\",\n      isValidUsername: false,\n      name: \"\",\n      isValidName: false,\n      surname: \"\",\n      isValidSurname: false,\n      email: \"\",\n      isValidEmail: false,\n      password: \"\",\n      isValidPassword: false,\n      passwordConfirmation: \"\",\n      submited: false\n    };\n  }\n\n  componentDidMount() {\n    this.inputToFocus.focus();\n  }\n\n  validateConfirmPassword() {\n    return this.state.password === this.state.passwordConfirmation;\n  }\n\n  validateName() {\n    if (this.state.name.length > 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  validateSurname() {\n    if (this.state.surname.length > 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  validateUsername() {\n    if (this.state.username.length > 3) {\n      return true;\n    }\n\n    return false;\n  }\n\n  validateEmail() {\n    // valid email pattern\n    const pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return pattern.test(String(this.state.email).toLowerCase());\n  }\n\n  validatePassword() {\n    if (this.state.password.length > 5) {\n      return true;\n    }\n\n    return false;\n  }\n\n  validate() {\n    this.state.isValidUsername = this.validateUsername();\n    this.state.isValidName = this.validateName();\n    this.state.isValidSurname = this.validateSurname();\n    this.state.isValidEmail = this.validateEmail();\n    this.state.isValidPassword = this.validatePassword();\n  }\n\n  isAllValid() {\n    return this.state.isValidUsername && this.state.isValidName && this.state.isValidSurname && this.state.isValidPassword && this.state.isValidEmail && this.passwordConfirmation();\n  }\n\n  /*\r\n      handleSubmit = (e) => \r\n      {\r\n          e.preventDefault()\r\n  \r\n          const userObject = {\r\n              userName: this.state.userName,\r\n              password: this.state.password\r\n          }\r\n  \r\n          axios.get(`${SERVER_HOST}/users`, userObject)\r\n          .then(res => \r\n          {   \r\n              if(res.data)\r\n              {\r\n                  if (res.data.errorMessage)\r\n                  {\r\n                      console.log(res.data.errorMessage)    \r\n                  }\r\n                  else\r\n                  {   \r\n                      console.log(\"Record added\")\r\n                      this.setState({redirectToDisplayAllCars:true})\r\n                  } \r\n              }\r\n              else\r\n              {\r\n                  console.log(\"Record not added\")\r\n              }\r\n          })\r\n      }\r\n  \r\n      validatePassword()\r\n      {    \r\n          const pattern = /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[£!#€$%^&*]).{10,}$/;\r\n          return pattern.test(String(this.state.password)); \r\n      }\r\n    */\n\n  /*\r\n     render()\r\n     {        \r\n         return (\r\n             <div className=\"form-container\">                                           \r\n                     \r\n                 <Form>\r\n                     <Form.Group controlId=\"userName\">\r\n                         <Form.Label>UserName</Form.Label>\r\n                         <Form.Control ref = {(input) => { this.inputToFocus = input }} type=\"text\" name=\"userName\" value={this.state.userName} onChange={this.handleChange} />\r\n                     </Form.Group>\r\n     \r\n                     <Form.Group controlId=\"userName\">\r\n                         <Form.Label>Password</Form.Label>\r\n                         <Form.Control ref = {(input) => { this.inputToFocus = input }} type=\"text\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n                     </Form.Group>\r\n             \r\n                     <LinkInClass value=\"Enter\" className=\"green-button\" onClick={this.handleSubmit}/>              \r\n             \r\n                     <Link className=\"green-button\" to={\"/MainPage\"}>Enter</Link>\r\n                 </Form>\r\n             </div>\r\n         )\r\n     }\r\n  */\n\n  /*\r\n      render()\r\n      {        \r\n          return (\r\n              <div>\r\n                  <img className=\"img-logo\" src=\"logo.png\" alt=\"\"/>\r\n                  <div className=\"form-container\" id = \"loginOrRegistrationForm\">  \r\n                      <Form>\r\n                          <Form.Group controlId=\"name\">\r\n                              <Form.Label>Name</Form.Label>\r\n                              <Form.Control ref = {(input) => { this.inputToFocus = input }} type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChange} />\r\n                          </Form.Group>\r\n  \r\n                          <Form.Group controlId=\"surname\">\r\n                              <Form.Label>Surname</Form.Label>\r\n                              <Form.Control ref = {(input) => { this.inputToFocus = input }} type=\"text\" name=\"surname\" value={this.state.surname} onChange={this.handleChange} />\r\n                          </Form.Group>\r\n  \r\n                          <Form.Group controlId=\"username\">\r\n                              <Form.Label>Username</Form.Label>\r\n                              <Form.Control ref = {(input) => { this.inputToFocus = input }} type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} />\r\n                          </Form.Group>\r\n  \r\n                          <Form.Group controlId=\"email\">\r\n                              <Form.Label>Email</Form.Label>\r\n                              <Form.Control ref = {(input) => { this.inputToFocus = input }} type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\r\n                          </Form.Group>\r\n  \r\n                          <Form.Group controlId=\"password\">\r\n                              <Form.Label>Password</Form.Label>\r\n                              <Form.Control ref = {(input) => { this.inputToFocus = input }} type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n                          </Form.Group>\r\n      \r\n                          <Form.Group controlId=\"passwordConfirmation\">\r\n                              <Form.Label>Password Confirmation</Form.Label>\r\n                              <Form.Control ref = {(input) => { this.inputToFocus = input }} className = {this.validateConfirmPassword() ? \"input\" : \"input.error\"} type=\"password\" name=\"passwordConfirmation\" value={this.state.passwordConfirmation} onChange={this.handleChange}/>\r\n                          </Form.Group>\r\n                              \r\n                          <Link className=\"red-button\" to={\"/Login\"}>Cancel</Link>       \r\n                          <Link className=\"blue-button\" to={\"SignInOthers\"}>Sign In as a shop or worker</Link>\r\n                          <Link className=\"green-button\" to={\"/MainPage\"}>Sign In</Link>\r\n                      </Form>\r\n                  </div>\r\n              </div>\r\n          )\r\n      }*/\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"img-logo\",\n      src: \"logo.png\",\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      className: \"form-container\",\n      noValidate: true,\n      id: \"loginOrRegistrationForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"label-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"Name\"), React.createElement(\"input\", {\n      className: this.state.isValidName || !this.state.submited ? \"input-form\" : \"input-form-error\",\n      name: \"name\",\n      type: \"text\",\n      placeholder: \"Charles\",\n      autoComplete: \"name\",\n      value: this.state.name,\n      onChange: this.handleChange,\n      ref: input => this.inputToFocus = input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"label-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"Surname\"), React.createElement(\"input\", {\n      className: this.state.isValidSurname || !this.state.submited ? \"input-form\" : \"input-form-error\",\n      name: \"surname\",\n      type: \"text\",\n      placeholder: \"Smith\",\n      autoComplete: \"surname\",\n      value: this.state.surname,\n      onChange: this.handleChange,\n      ref: input => this.inputToFocus = input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"label-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"Username\"), React.createElement(\"input\", {\n      className: this.state.isValidUsername || !this.state.submited ? \"input-form\" : \"input-form-error\",\n      name: \"username\",\n      type: \"text\",\n      placeholder: \"CharlesSmith\",\n      autoComplete: \"username\",\n      value: this.state.username,\n      onChange: this.handleChange,\n      ref: input => this.inputToFocus = input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"label-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, \"Email\"), React.createElement(\"input\", {\n      className: this.state.isValidEmail || !this.state.submited ? \"input-form\" : \"input-form-error\",\n      name: \"email\",\n      type: \"email\",\n      placeholder: \"CharlesSmith@gmail.com\",\n      autoComplete: \"email\",\n      value: this.state.email,\n      onChange: this.handleChange,\n      ref: input => this.inputToFocus = input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"label-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, \"Password\"), React.createElement(\"input\", {\n      className: this.state.isValidPassword || !this.state.submited ? \"input-form\" : \"input-form-error\",\n      name: \"password\",\n      type: \"password\",\n      placeholder: \"\",\n      autoComplete: \"password\",\n      title: \"Password must be at least ten-digits long and contains at least one lowercase letter, one uppercase letter, one digit and one of the following characters (\\xA3!#\\u20AC$%^&*)\",\n      value: this.state.password,\n      onChange: this.handleChange,\n      ref: input => this.inputToFocus = input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"label-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, \"Password Again\"), React.createElement(\"input\", {\n      className: this.validateConfirmPassword() || !this.state.submited ? \"input-form\" : \"input-form-error\",\n      name: \"passwordConfirmation\",\n      type: \"password\",\n      placeholder: \"\",\n      autoComplete: \"passwordConfirmation\",\n      value: this.state.passwordConfirmation,\n      onChange: this.handleChange,\n      ref: input => this.inputToFocus = input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }), React.createElement(Link, {\n      className: \"red-button\",\n      to: \"/Login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Link, {\n      className: \"blue-button\",\n      to: \"/Login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"Register as a Shop or Rider\"), React.createElement(LinkInClass, {\n      value: \"Sign In\",\n      className: \"green-button\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:\\nodejs_projects\\BeachExpress\\client\\src\\components\\SignIn.js"],"names":["React","Component","Redirect","Link","Form","axios","SERVER_HOST","LinkInClass","SignIn","constructor","props","handleChange","e","setState","target","name","value","handleSubmit","state","submited","validate","console","log","isValidUsername","isAllValid","username","isValidName","surname","isValidSurname","email","isValidEmail","password","isValidPassword","passwordConfirmation","componentDidMount","inputToFocus","focus","validateConfirmPassword","validateName","length","validateSurname","validateUsername","validateEmail","pattern","test","String","toLowerCase","validatePassword","render","input"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,QAAR,EAAkBC,IAAlB,QAA6B,kBAA7B;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAAQC,WAAR,QAA0B,4BAA1B;AAEA,OAAOC,WAAP,MAAwB,2BAAxB;AAGA,eAAe,MAAMC,MAAN,SAAqBP,SAArB,CACf;AACIQ,EAAAA,WAAW,CAACC,KAAD,EACX;AACI,UAAMA,KAAN;;AADJ,SAyBAC,YAzBA,GAyBgBC,CAAD,IACf;AACI,WAAKC,QAAL,CAAc;AAAC,SAACD,CAAC,CAACE,MAAF,CAASC,IAAV,GAAiBH,CAAC,CAACE,MAAF,CAASE;AAA3B,OAAd;AAEH,KA7BD;;AAAA,SAuFAC,YAvFA,GAuFgBL,CAAD,IACf;AACI,WAAKM,KAAL,CAAWC,QAAX,GAAsB,IAAtB;AACA,WAAKC,QAAL;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWK,eAAvB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWK,eAAvB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWK,eAAvB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWK,eAAvB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWK,eAAvB;AAEAF,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKE,UAAL,EAAZ,EAVJ,CAYI;AACH,KArGD;;AAGI,SAAKN,KAAL,GAAa;AACTO,MAAAA,QAAQ,EAAC,EADA;AAETF,MAAAA,eAAe,EAAE,KAFR;AAGTR,MAAAA,IAAI,EAAC,EAHI;AAITW,MAAAA,WAAW,EAAE,KAJJ;AAKTC,MAAAA,OAAO,EAAC,EALC;AAMTC,MAAAA,cAAc,EAAE,KANP;AAOTC,MAAAA,KAAK,EAAC,EAPG;AAQTC,MAAAA,YAAY,EAAE,KARL;AASTC,MAAAA,QAAQ,EAAC,EATA;AAUTC,MAAAA,eAAe,EAAE,KAVR;AAWTC,MAAAA,oBAAoB,EAAC,EAXZ;AAYTd,MAAAA,QAAQ,EAAC;AAZA,KAAb;AAcH;;AAGDe,EAAAA,iBAAiB,GACjB;AACI,SAAKC,YAAL,CAAkBC,KAAlB;AACH;;AAQDC,EAAAA,uBAAuB,GACvB;AACI,WAAQ,KAAKnB,KAAL,CAAWa,QAAX,KAAwB,KAAKb,KAAL,CAAWe,oBAA3C;AACH;;AAEDK,EAAAA,YAAY,GACZ;AACI,QAAG,KAAKpB,KAAL,CAAWH,IAAX,CAAgBwB,MAAhB,GAAuB,CAA1B,EAA4B;AACxB,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AAEDC,EAAAA,eAAe,GACf;AACI,QAAG,KAAKtB,KAAL,CAAWS,OAAX,CAAmBY,MAAnB,GAA0B,CAA7B,EAA+B;AAC3B,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AAEDE,EAAAA,gBAAgB,GAChB;AACI,QAAG,KAAKvB,KAAL,CAAWO,QAAX,CAAoBc,MAApB,GAA2B,CAA9B,EAAgC;AAC5B,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AAEAG,EAAAA,aAAa,GACd;AACI;AACA,UAAMC,OAAO,GAAG,yJAAhB;AACA,WAAOA,OAAO,CAACC,IAAR,CAAaC,MAAM,CAAC,KAAK3B,KAAL,CAAWW,KAAZ,CAAN,CAAyBiB,WAAzB,EAAb,CAAP;AACH;;AAEDC,EAAAA,gBAAgB,GAAE;AACd,QAAG,KAAK7B,KAAL,CAAWa,QAAX,CAAoBQ,MAApB,GAA2B,CAA9B,EAAgC;AAC5B,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AAEDnB,EAAAA,QAAQ,GAAE;AACN,SAAKF,KAAL,CAAWK,eAAX,GAA6B,KAAKkB,gBAAL,EAA7B;AACA,SAAKvB,KAAL,CAAWQ,WAAX,GAAyB,KAAKY,YAAL,EAAzB;AACA,SAAKpB,KAAL,CAAWU,cAAX,GAA4B,KAAKY,eAAL,EAA5B;AACA,SAAKtB,KAAL,CAAWY,YAAX,GAA0B,KAAKY,aAAL,EAA1B;AACA,SAAKxB,KAAL,CAAWc,eAAX,GAA6B,KAAKe,gBAAL,EAA7B;AACH;;AAEDvB,EAAAA,UAAU,GAAE;AACR,WAAO,KAAKN,KAAL,CAAWK,eAAX,IAA8B,KAAKL,KAAL,CAAWQ,WAAzC,IAAwD,KAAKR,KAAL,CAAWU,cAAnE,IAAqF,KAAKV,KAAL,CAAWc,eAAhG,IAAmH,KAAKd,KAAL,CAAWY,YAA9H,IAA8I,KAAKG,oBAAL,EAArJ;AACH;;AAmBL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCC;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDIe,EAAAA,MAAM,GACN;AACI,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,GAAG,EAAC,UAA9B;AAAyC,MAAA,GAAG,EAAC,EAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAGI;AAAM,MAAA,SAAS,EAAC,gBAAhB;AAAiC,MAAA,UAAU,EAAI,IAA/C;AAAqD,MAAA,EAAE,EAAG,yBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGI;AAAO,MAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,EAII;AAAQ,MAAA,SAAS,EAAI,KAAK9B,KAAL,CAAWQ,WAAX,IAAyB,CAAC,KAAKR,KAAL,CAAWC,QAArC,GAAgD,YAAhD,GAA+D,kBAApF;AACI,MAAA,IAAI,EAAG,MADX;AAEI,MAAA,IAAI,EAAG,MAFX;AAGI,MAAA,WAAW,EAAG,SAHlB;AAII,MAAA,YAAY,EAAC,MAJjB;AAKI,MAAA,KAAK,EAAI,KAAKD,KAAL,CAAWH,IALxB;AAMI,MAAA,QAAQ,EAAI,KAAKJ,YANrB;AAOI,MAAA,GAAG,EAAIsC,KAAK,IAAI,KAAKd,YAAL,GAAoBc,KAPxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAYM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZN,EAcI;AAAO,MAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAdJ,EAeI;AAAQ,MAAA,SAAS,EAAI,KAAK/B,KAAL,CAAWU,cAAX,IAA6B,CAAC,KAAKV,KAAL,CAAWC,QAAzC,GAAmD,YAAnD,GAAkE,kBAAvF;AACI,MAAA,IAAI,EAAG,SADX;AAEI,MAAA,IAAI,EAAG,MAFX;AAGI,MAAA,WAAW,EAAG,OAHlB;AAII,MAAA,YAAY,EAAC,SAJjB;AAKI,MAAA,KAAK,EAAI,KAAKD,KAAL,CAAWS,OALxB;AAMI,MAAA,QAAQ,EAAI,KAAKhB,YANrB;AAOI,MAAA,GAAG,EAAIsC,KAAK,IAAI,KAAKd,YAAL,GAAoBc,KAPxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfJ,EAuBM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvBN,EA0BI;AAAO,MAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA1BJ,EA2BI;AAAQ,MAAA,SAAS,EAAI,KAAK/B,KAAL,CAAWK,eAAX,IAA8B,CAAC,KAAKL,KAAL,CAAWC,QAA1C,GAAqD,YAArD,GAAoE,kBAAzF;AACI,MAAA,IAAI,EAAG,UADX;AAEI,MAAA,IAAI,EAAG,MAFX;AAGI,MAAA,WAAW,EAAG,cAHlB;AAII,MAAA,YAAY,EAAC,UAJjB;AAKI,MAAA,KAAK,EAAI,KAAKD,KAAL,CAAWO,QALxB;AAMI,MAAA,QAAQ,EAAI,KAAKd,YANrB;AAOI,MAAA,GAAG,EAAIsC,KAAK,IAAI,KAAKd,YAAL,GAAoBc,KAPxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3BJ,EAmCM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnCN,EAqCA;AAAO,MAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eArCA,EAsCA;AAAQ,MAAA,SAAS,EAAI,KAAK/B,KAAL,CAAWY,YAAX,IAA0B,CAAC,KAAKZ,KAAL,CAAWC,QAAtC,GAAiD,YAAjD,GAAgE,kBAArF;AACQ,MAAA,IAAI,EAAG,OADf;AAEQ,MAAA,IAAI,EAAG,OAFf;AAGQ,MAAA,WAAW,EAAG,wBAHtB;AAIQ,MAAA,YAAY,EAAC,OAJrB;AAKQ,MAAA,KAAK,EAAI,KAAKD,KAAL,CAAWW,KAL5B;AAMQ,MAAA,QAAQ,EAAI,KAAKlB,YANzB;AAOQ,MAAA,GAAG,EAAIsC,KAAK,IAAI,KAAKd,YAAL,GAAoBc,KAP5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtCA,EA8CM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9CN,EAgDI;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhDJ,EAoDA;AAAQ,MAAA,SAAS,EAAI,KAAK/B,KAAL,CAAWc,eAAX,IAA6B,CAAC,KAAKd,KAAL,CAAWC,QAAzC,GAAoD,YAApD,GAAmE,kBAAxF;AACQ,MAAA,IAAI,EAAG,UADf;AAEQ,MAAA,IAAI,EAAG,UAFf;AAGQ,MAAA,WAAW,EAAG,EAHtB;AAIQ,MAAA,YAAY,EAAC,UAJrB;AAKQ,MAAA,KAAK,EAAG,+KALhB;AAMQ,MAAA,KAAK,EAAI,KAAKD,KAAL,CAAWa,QAN5B;AAOQ,MAAA,QAAQ,EAAI,KAAKpB,YAPzB;AAQQ,MAAA,GAAG,EAAIsC,KAAK,IAAI,KAAKd,YAAL,GAAoBc,KAR5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApDA,EA8DI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9DJ,EAiEI;AAAO,MAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAjEJ,EAoEI;AAAO,MAAA,SAAS,EAAI,KAAKZ,uBAAL,MAAiC,CAAC,KAAKnB,KAAL,CAAWC,QAA7C,GAAwD,YAAxD,GAAuE,kBAA3F;AACI,MAAA,IAAI,EAAG,sBADX;AAEI,MAAA,IAAI,EAAG,UAFX;AAGI,MAAA,WAAW,EAAG,EAHlB;AAII,MAAA,YAAY,EAAC,sBAJjB;AAKI,MAAA,KAAK,EAAI,KAAKD,KAAL,CAAWe,oBALxB;AAMI,MAAA,QAAQ,EAAI,KAAKtB,YANrB;AAOI,MAAA,GAAG,EAAIsC,KAAK,IAAI,KAAKd,YAAL,GAAoBc,KAPxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApEJ,EA4EM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5EN,EA4EW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5EX,EA8EI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,YAAhB;AAA6B,MAAA,EAAE,EAAE,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA9EJ,EA+EI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,aAAhB;AAA8B,MAAA,EAAE,EAAE,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCA/EJ,EAgFI,oBAAC,WAAD;AAAa,MAAA,KAAK,EAAC,SAAnB;AAA6B,MAAA,SAAS,EAAC,cAAvC;AAAsD,MAAA,OAAO,EAAE,KAAKhC,YAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhFJ,CAHJ,CADJ;AAyFH;;AAnTL","sourcesContent":["import React, {Component} from \"react\"\r\nimport {Redirect, Link} from \"react-router-dom\"\r\nimport Form from \"react-bootstrap/Form\"\r\n\r\nimport axios from \"axios\"\r\n\r\nimport {SERVER_HOST} from \"../config/global_constants\"\r\n\r\nimport LinkInClass from \"../components/LinkInClass\"\r\n\r\n\r\nexport default class SignIn extends Component \r\n{\r\n    constructor(props) \r\n    {\r\n        super(props)\r\n        \r\n        this.state = {\r\n            username:\"\",\r\n            isValidUsername: false,\r\n            name:\"\",\r\n            isValidName: false,\r\n            surname:\"\",\r\n            isValidSurname: false,\r\n            email:\"\",\r\n            isValidEmail: false,\r\n            password:\"\",\r\n            isValidPassword: false,\r\n            passwordConfirmation:\"\",\r\n            submited:false\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() \r\n    {     \r\n        this.inputToFocus.focus()        \r\n    }\r\n\r\n    handleChange = (e) => \r\n    {\r\n        this.setState({[e.target.name]: e.target.value})\r\n\r\n    }\r\n\r\n    validateConfirmPassword()\r\n    {    \r\n        return (this.state.password === this.state.passwordConfirmation); \r\n    }\r\n\r\n    validateName()\r\n    {    \r\n        if(this.state.name.length>0){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    validateSurname()\r\n    {    \r\n        if(this.state.surname.length>0){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    validateUsername()\r\n    {    \r\n        if(this.state.username.length>3){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n     validateEmail()\r\n    {    \r\n        // valid email pattern\r\n        const pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return pattern.test(String(this.state.email).toLowerCase());\r\n    }\r\n\r\n    validatePassword(){\r\n        if(this.state.password.length>5){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    validate(){\r\n        this.state.isValidUsername = this.validateUsername();\r\n        this.state.isValidName = this.validateName();\r\n        this.state.isValidSurname = this.validateSurname();\r\n        this.state.isValidEmail = this.validateEmail();\r\n        this.state.isValidPassword = this.validatePassword();\r\n    }\r\n\r\n    isAllValid(){\r\n        return this.state.isValidUsername && this.state.isValidName && this.state.isValidSurname && this.state.isValidPassword && this.state.isValidEmail && this.passwordConfirmation();\r\n    }\r\n\r\n\r\n    handleSubmit = (e) =>\r\n    {\r\n        this.state.submited = true;\r\n        this.validate();\r\n\r\n        console.log(this.state.isValidUsername);\r\n        console.log(this.state.isValidUsername);\r\n        console.log(this.state.isValidUsername);\r\n        console.log(this.state.isValidUsername);\r\n        console.log(this.state.isValidUsername);\r\n\r\n        console.log(this.isAllValid());\r\n\r\n        //console.log(\"Nombre: \" + this.state.isValidName);\r\n    }\r\n\r\n/*\r\n    handleSubmit = (e) => \r\n    {\r\n        e.preventDefault()\r\n\r\n        const userObject = {\r\n            userName: this.state.userName,\r\n            password: this.state.password\r\n        }\r\n\r\n        axios.get(`${SERVER_HOST}/users`, userObject)\r\n        .then(res => \r\n        {   \r\n            if(res.data)\r\n            {\r\n                if (res.data.errorMessage)\r\n                {\r\n                    console.log(res.data.errorMessage)    \r\n                }\r\n                else\r\n                {   \r\n                    console.log(\"Record added\")\r\n                    this.setState({redirectToDisplayAllCars:true})\r\n                } \r\n            }\r\n            else\r\n            {\r\n                console.log(\"Record not added\")\r\n            }\r\n        })\r\n    }\r\n\r\n    validatePassword()\r\n    {    \r\n        const pattern = /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[£!#€$%^&*]).{10,}$/;\r\n        return pattern.test(String(this.state.password)); \r\n    }\r\n  */\r\n /*\r\n    render()\r\n    {        \r\n        return (\r\n            <div className=\"form-container\">                                           \r\n                    \r\n                <Form>\r\n                    <Form.Group controlId=\"userName\">\r\n                        <Form.Label>UserName</Form.Label>\r\n                        <Form.Control ref = {(input) => { this.inputToFocus = input }} type=\"text\" name=\"userName\" value={this.state.userName} onChange={this.handleChange} />\r\n                    </Form.Group>\r\n    \r\n                    <Form.Group controlId=\"userName\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control ref = {(input) => { this.inputToFocus = input }} type=\"text\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n                    </Form.Group>\r\n            \r\n                    <LinkInClass value=\"Enter\" className=\"green-button\" onClick={this.handleSubmit}/>              \r\n            \r\n                    <Link className=\"green-button\" to={\"/MainPage\"}>Enter</Link>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n*/\r\n/*\r\n    render()\r\n    {        \r\n        return (\r\n            <div>\r\n                <img className=\"img-logo\" src=\"logo.png\" alt=\"\"/>\r\n                <div className=\"form-container\" id = \"loginOrRegistrationForm\">  \r\n                    <Form>\r\n                        <Form.Group controlId=\"name\">\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control ref = {(input) => { this.inputToFocus = input }} type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChange} />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"surname\">\r\n                            <Form.Label>Surname</Form.Label>\r\n                            <Form.Control ref = {(input) => { this.inputToFocus = input }} type=\"text\" name=\"surname\" value={this.state.surname} onChange={this.handleChange} />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"username\">\r\n                            <Form.Label>Username</Form.Label>\r\n                            <Form.Control ref = {(input) => { this.inputToFocus = input }} type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"email\">\r\n                            <Form.Label>Email</Form.Label>\r\n                            <Form.Control ref = {(input) => { this.inputToFocus = input }} type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"password\">\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control ref = {(input) => { this.inputToFocus = input }} type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n                        </Form.Group>\r\n    \r\n                        <Form.Group controlId=\"passwordConfirmation\">\r\n                            <Form.Label>Password Confirmation</Form.Label>\r\n                            <Form.Control ref = {(input) => { this.inputToFocus = input }} className = {this.validateConfirmPassword() ? \"input\" : \"input.error\"} type=\"password\" name=\"passwordConfirmation\" value={this.state.passwordConfirmation} onChange={this.handleChange}/>\r\n                        </Form.Group>\r\n                            \r\n                        <Link className=\"red-button\" to={\"/Login\"}>Cancel</Link>       \r\n                        <Link className=\"blue-button\" to={\"SignInOthers\"}>Sign In as a shop or worker</Link>\r\n                        <Link className=\"green-button\" to={\"/MainPage\"}>Sign In</Link>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }*/\r\n\r\n    \r\n    render() \r\n    {     \r\n        return (\r\n            <div> \r\n                <img className=\"img-logo\" src=\"logo.png\" alt=\"\"/>\r\n\r\n                <form className=\"form-container\" noValidate = {true} id = \"loginOrRegistrationForm\">\r\n                \r\n                    \r\n                    <label className=\"label-form\">Name</label>\r\n                    <input  className = {this.state.isValidName|| !this.state.submited ? \"input-form\" : \"input-form-error\"}\r\n                        name = \"name\"              \r\n                        type = \"text\"\r\n                        placeholder = \"Charles\"\r\n                        autoComplete=\"name\"\r\n                        value = {this.state.name}\r\n                        onChange = {this.handleChange}\r\n                        ref = {input => this.inputToFocus = input}\r\n                    /><br/> \r\n\r\n                    <label className=\"label-form\">Surname</label>  \r\n                    <input  className = {this.state.isValidSurname || !this.state.submited? \"input-form\" : \"input-form-error\"}\r\n                        name = \"surname\"              \r\n                        type = \"text\"\r\n                        placeholder = \"Smith\"\r\n                        autoComplete=\"surname\"\r\n                        value = {this.state.surname}\r\n                        onChange = {this.handleChange}\r\n                        ref = {input => this.inputToFocus = input}\r\n                    /><br/>    \r\n                    \r\n                    \r\n                    <label className=\"label-form\">Username</label>  \r\n                    <input  className = {this.state.isValidUsername || !this.state.submited ? \"input-form\" : \"input-form-error\"}\r\n                        name = \"username\"              \r\n                        type = \"text\"\r\n                        placeholder = \"CharlesSmith\"\r\n                        autoComplete=\"username\"\r\n                        value = {this.state.username}\r\n                        onChange = {this.handleChange}\r\n                        ref = {input => this.inputToFocus = input}\r\n                    /><br/>             \r\n\r\n                <label className=\"label-form\">Email</label>  \r\n                <input  className = {this.state.isValidEmail|| !this.state.submited ? \"input-form\" : \"input-form-error\"}\r\n                        name = \"email\"              \r\n                        type = \"email\"\r\n                        placeholder = \"CharlesSmith@gmail.com\"\r\n                        autoComplete=\"email\"\r\n                        value = {this.state.email}\r\n                        onChange = {this.handleChange}\r\n                        ref = {input => this.inputToFocus = input}\r\n                    /><br/>              \r\n\r\n                    <label  className=\"label-form\">\r\n                            Password\r\n                        \r\n                    </label> \r\n                <input  className = {this.state.isValidPassword|| !this.state.submited ? \"input-form\" : \"input-form-error\"}\r\n                        name = \"password\"           \r\n                        type = \"password\"\r\n                        placeholder = \"\"\r\n                        autoComplete=\"password\"\r\n                        title = \"Password must be at least ten-digits long and contains at least one lowercase letter, one uppercase letter, one digit and one of the following characters (£!#€$%^&*)\"\r\n                        value = {this.state.password}\r\n                        onChange = {this.handleChange}\r\n                        ref = {input => this.inputToFocus = input}\r\n                    />\r\n                    <br/>     \r\n                       \r\n\r\n                    <label className=\"label-form\">\r\n                            Password Again\r\n                    </label> \r\n                    <input className = {this.validateConfirmPassword()|| !this.state.submited ? \"input-form\" : \"input-form-error\"}   \r\n                        name = \"passwordConfirmation\"    \r\n                        type = \"password\"\r\n                        placeholder = \"\"\r\n                        autoComplete=\"passwordConfirmation\"\r\n                        value = {this.state.passwordConfirmation}\r\n                        onChange = {this.handleChange}\r\n                        ref = {input => this.inputToFocus = input}\r\n                    /><br/><br/>\r\n                    \r\n                    <Link className=\"red-button\" to={\"/Login\"}>Cancel</Link> \r\n                    <Link className=\"blue-button\" to={\"/Login\"}>Register as a Shop or Rider</Link> \r\n                    <LinkInClass value=\"Sign In\" className=\"green-button\" onClick={this.handleSubmit} />\r\n                      \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n"]},"metadata":{},"sourceType":"module"}